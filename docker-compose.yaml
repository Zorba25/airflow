version: "3.8"

x-airflow-env: &airflow-env
  AIRFLOW__CORE__EXECUTOR: LocalExecutor
  AIRFLOW__CORE__LOAD_EXAMPLES: "false"
  AIRFLOW__WEBSERVER__DEFAULT_UI_LANG: en
  AIRFLOW__API__AUTH_BACKENDS: airflow.api.auth.backend.basic_auth
  AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
  AIRFLOW__DATABASE__SQL_ALCHEMY_POOL_SIZE: 5
  AIRFLOW__DATABASE__SQL_ALCHEMY_MAX_OVERFLOW: 10

x-airflow-vols: &airflow-vols
  - ./dags:/opt/airflow/dags
  - ./logs:/opt/airflow/logs
  - ./plugins:/opt/airflow/plugins

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow -d airflow"]
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - postgres_db_volume:/var/lib/postgresql/data

  airflow-init:
    build: .
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      <<: *airflow-env
    entrypoint: /bin/bash
    command:
      - -c
      - |
        airflow db init
        airflow users create \
          --username admin \
          --password admin \
          --firstname Admin \
          --lastname User \
          --role Admin \
          --email admin@example.com
    volumes: *airflow-vols

  airflow-webserver:
    build: .
    command: webserver
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      <<: *airflow-env
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8080/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    volumes: *airflow-vols

  airflow-scheduler:
    build: .
    command: scheduler
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      airflow-webserver:
        condition: service_started
    environment:
      <<: *airflow-env
    volumes: *airflow-vols

volumes:
  postgres_db_volume:
